// SPDX-License-Identifier: UNLICENSE
pragma solidity ^0.8.28;

import "forge-std/Test.sol";
import "../src/FGOAccessControl.sol";
import "../src/FGOEmbellishmentsChild.sol";
import "../src/FGOLibrary.sol";
import "../src/FGOErrors.sol";

contract FGOEmbellishmentsChildTest is Test {
    FGOAccessControl public accessControl;
    FGOEmbellishmentsChild public embellishmentsChild;

    address public admin = makeAddr("admin");
    address public supplier1 = makeAddr("supplier1");
    address public supplier2 = makeAddr("supplier2");
    address public designer1 = makeAddr("designer1");
    address public market1 = makeAddr("market1");
    address public market2 = makeAddr("market2");
    address public buyer1 = makeAddr("buyer1");
    address public buyer2 = makeAddr("buyer2");
    address public unauthorizedUser = makeAddr("unauthorizedUser");

    uint256 public constant CHILD_PRICE = 200 * 10 ** 18;
    uint256 public constant MAX_PHYSICAL = 500;

    event EmbellishmentsCreated(uint256 indexed childId);
    event EmbellishmentsMinted(
        uint256 indexed childId,
        address indexed to,
        uint256 amount
    );
    event EmbellishmentsMetadataUpdated(uint256 indexed childId);
    event EmbellishmentsDeleted(uint256 indexed childId);

    function setUp() public {
        vm.prank(admin);
        accessControl = new FGOAccessControl();

        vm.startPrank(admin);
        accessControl.addSupplier(supplier1);
        accessControl.addSupplier(supplier2);
        accessControl.addDesigner(designer1);
        vm.stopPrank();

        embellishmentsChild = new FGOEmbellishmentsChild(
            address(accessControl)
        );

        vm.prank(admin);
        accessControl.authorizeMarket(market1);
    }

    function test_CreateEmbellishments_SupplierRole() public {
        vm.prank(supplier1);
        vm.expectEmit(true, false, false, false);
        emit EmbellishmentsCreated(1);
        uint256 childId = embellishmentsChild.createChild(
            "ipfs://metal-studs",
            CHILD_PRICE,
            1,
            MAX_PHYSICAL,
            new address[](0),
            0,
            new address[](0),
            false
        );

        assertEq(childId, 1);
        assertEq(embellishmentsChild.getChildURI(1), "ipfs://metal-studs");
        assertEq(embellishmentsChild.getChildPrice(1), CHILD_PRICE);
        assertEq(embellishmentsChild.getChildVersion(1), 1);
        assertEq(
            embellishmentsChild.getMaxPhysicalFulfillments(1),
            MAX_PHYSICAL
        );
        assertEq(embellishmentsChild.getPhysicalFulfillments(1), 0);
        assertTrue(embellishmentsChild.childExists(1));
        assertTrue(embellishmentsChild.childExists(1));
        assertEq(embellishmentsChild.getChildSupply(1), 0);
        assertEq(
            uint256(embellishmentsChild.getChildType(1)),
            uint256(FGOLibrary.ChildType.EMBELLISHMENTS)
        );
    }

    function test_CreateEmbellishments_AdminCanCreate() public {
        vm.prank(admin);
        uint256 childId = embellishmentsChild.createChild(
            "ipfs://admin-embellishments",
            CHILD_PRICE,
            1,
            0,
            new address[](0),
            0,
            new address[](0),
            false
        );

        assertEq(childId, 1);
        assertTrue(embellishmentsChild.childExists(1));
        assertEq(embellishmentsChild.getMaxPhysicalFulfillments(1), 0);
    }

    function test_CreateEmbellishments_RevertIfNotSupplier() public {
        vm.prank(designer1);
        vm.expectRevert(FGOErrors.AddressInvalid.selector);
        embellishmentsChild.createChild(
            "ipfs://embellishments1",
            CHILD_PRICE,
            1,
            MAX_PHYSICAL,
            new address[](0),
            0,
            new address[](0),
            false
        );

        vm.prank(unauthorizedUser);
        vm.expectRevert(FGOErrors.AddressInvalid.selector);
        embellishmentsChild.createChild(
            "ipfs://embellishments1",
            CHILD_PRICE,
            1,
            MAX_PHYSICAL,
            new address[](0),
            0,
            new address[](0),
            false
        );
    }

    function test_CreateEmbellishments_HighValueEmbellishments() public {
        uint256 highPrice = 1000 * 10 ** 18;
        uint256 limitedSupply = 50;

        vm.prank(supplier1);
        uint256 childId = embellishmentsChild.createChild(
            "ipfs://diamond-studs",
            highPrice,
            1,
            limitedSupply,
            new address[](0),
            0,
            new address[](0),
            false
        );

        assertEq(childId, 1);
        assertEq(embellishmentsChild.getChildPrice(1), highPrice);
        assertEq(
            embellishmentsChild.getMaxPhysicalFulfillments(1),
            limitedSupply
        );
        assertTrue(embellishmentsChild.canFulfillPhysically(1));
    }

    function test_MintWithPhysicalRights_LimitedEmbellishments() public {
        vm.prank(supplier1);
        uint256 childId = embellishmentsChild.createChild(
            "ipfs://rare-chains",
            CHILD_PRICE,
            1,
            20,
            new address[](0),
            0,
            new address[](0),
            false
        );

        vm.prank(market1);
        embellishmentsChild.mintWithPhysicalRights(buyer1, childId, 10, 8);

        assertEq(embellishmentsChild.balanceOf(buyer1, childId), 10);
        assertEq(embellishmentsChild.getPhysicalRights(buyer1, childId), 8);
        assertEq(embellishmentsChild.getPhysicalFulfillments(childId), 8);
        assertTrue(embellishmentsChild.canFulfillPhysically(childId));

        vm.prank(market1);
        embellishmentsChild.mintWithPhysicalRights(buyer2, childId, 15, 12);

        assertEq(embellishmentsChild.balanceOf(buyer2, childId), 15);
        assertEq(embellishmentsChild.getPhysicalRights(buyer2, childId), 12);
        assertEq(embellishmentsChild.getPhysicalFulfillments(childId), 20);
        assertFalse(embellishmentsChild.canFulfillPhysically(childId));
    }

    function test_MintWithPhysicalRights_ExceedsPhysicalLimit() public {
        vm.prank(supplier1);
        uint256 childId = embellishmentsChild.createChild(
            "ipfs://limited-beads",
            CHILD_PRICE,
            1,
            15,
            new address[](0),
            0,
            new address[](0),
            false
        );

        vm.prank(market1);
        embellishmentsChild.mintWithPhysicalRights(buyer1, childId, 10, 10);

        vm.prank(market1);
        vm.expectRevert(FGOErrors.InvalidAmount.selector);
        embellishmentsChild.mintWithPhysicalRights(buyer2, childId, 5, 10);
    }

    function test_UpdateEmbellishmentsMetadata() public {
        vm.prank(supplier1);
        uint256 childId = embellishmentsChild.createChild(
            "ipfs://buttons",
            CHILD_PRICE,
            1,
            MAX_PHYSICAL,
            new address[](0),
            0,
            new address[](0),
            false
        );

        uint256 newPrice = CHILD_PRICE * 2;

        vm.prank(supplier1);
        vm.expectEmit(true, false, false, false);
        emit EmbellishmentsMetadataUpdated(childId);
        embellishmentsChild.updateChild(
            childId,
            newPrice,
            1,
            new address[](0),
            0,
            "",
            MAX_PHYSICAL,
            new address[](0),
            false,
            "price update"
        );

        assertEq(embellishmentsChild.getChildPrice(childId), newPrice);
    }

    function test_UpdateChildMetadata_GenericInterface() public {
        vm.prank(supplier1);
        uint256 childId = embellishmentsChild.createChild(
            "ipfs://zippers",
            CHILD_PRICE,
            1,
            MAX_PHYSICAL,
            new address[](0),
            0,
            new address[](0),
            false
        );

        uint256 newPrice = CHILD_PRICE * 3;

        vm.prank(supplier1);
        vm.expectEmit(true, false, false, false);
        emit EmbellishmentsMetadataUpdated(childId);
        embellishmentsChild.updateChild(
            childId,
            newPrice,
            1,
            new address[](0),
            0,
            "",
            MAX_PHYSICAL,
            new address[](0),
            false,
            "price update"
        );

        assertEq(embellishmentsChild.getChildPrice(childId), newPrice);
    }

    function test_DeleteEmbellishments() public {
        vm.prank(supplier1);
        uint256 childId = embellishmentsChild.createChild(
            "ipfs://rivets",
            CHILD_PRICE,
            1,
            MAX_PHYSICAL,
            new address[](0),
            0,
            new address[](0),
            false
        );

        assertTrue(embellishmentsChild.childExists(childId));

        vm.prank(admin);
        vm.expectEmit(true, false, false, false);
        emit EmbellishmentsDeleted(childId);
        embellishmentsChild.deleteChild(childId);

        assertFalse(embellishmentsChild.childExists(childId));
    }

    function test_DeleteChild_GenericInterface() public {
        vm.prank(supplier1);
        uint256 childId = embellishmentsChild.createChild(
            "ipfs://grommets",
            CHILD_PRICE,
            1,
            MAX_PHYSICAL,
            new address[](0),
            0,
            new address[](0),
            false
        );

        assertTrue(embellishmentsChild.childExists(childId));

        vm.prank(admin);
        vm.expectEmit(true, false, false, false);
        emit EmbellishmentsDeleted(childId);
        embellishmentsChild.deleteChild(childId);

        assertFalse(embellishmentsChild.childExists(childId));
    }

    function test_CreateChild_GenericInterface() public {
        vm.prank(supplier1);
        uint256 childId = embellishmentsChild.createChild(
            "ipfs://generic-embellishments",
            CHILD_PRICE,
            1,
            0,
            new address[](0),
            0,
            new address[](0),
            false
        );

        assertEq(childId, 1);
        assertEq(
            uint256(embellishmentsChild.getChildType(1)),
            uint256(FGOLibrary.ChildType.EMBELLISHMENTS)
        );
        assertTrue(embellishmentsChild.childExists(1));
        assertEq(embellishmentsChild.getMaxPhysicalFulfillments(1), 0);
    }

    function test_CreateChildWithPhysicalLimit_GenericInterface() public {
        vm.prank(supplier1);
        uint256 childId = embellishmentsChild.createChild(
            "ipfs://generic-limited-embellishments",
            CHILD_PRICE,
            1,
            MAX_PHYSICAL,
            new address[](0),
            0,
            new address[](0),
            false
        );

        assertEq(childId, 1);
        assertEq(
            embellishmentsChild.getMaxPhysicalFulfillments(1),
            MAX_PHYSICAL
        );
        assertEq(
            uint256(embellishmentsChild.getChildType(1)),
            uint256(FGOLibrary.ChildType.EMBELLISHMENTS)
        );
    }

    struct EmbellishmentData {
        string uri;
        uint256 price;
        uint256 maxPhysical;
    }

    function test_MultipleEmbellishmentTypes() public {
        EmbellishmentData[] memory embellishments = new EmbellishmentData[](5);
        embellishments[0] = EmbellishmentData(
            "ipfs://metal-studs",
            50 * 10 ** 18,
            1000
        );
        embellishments[1] = EmbellishmentData(
            "ipfs://pearl-beads",
            100 * 10 ** 18,
            500
        );
        embellishments[2] = EmbellishmentData(
            "ipfs://gold-chains",
            300 * 10 ** 18,
            200
        );
        embellishments[3] = EmbellishmentData(
            "ipfs://leather-patches",
            75 * 10 ** 18,
            750
        );
        embellishments[4] = EmbellishmentData(
            "ipfs://crystal-gems",
            500 * 10 ** 18,
            100
        );

        vm.startPrank(supplier1);

        for (uint256 i = 0; i < embellishments.length; i++) {
            uint256 childId = embellishmentsChild.createChild(
                embellishments[i].uri,
                embellishments[i].price,
                1,
                embellishments[i].maxPhysical,
                new address[](0),
                0,
                new address[](0),
                false
            );
            assertEq(childId, i + 1);
        }

        vm.stopPrank();

        for (uint256 i = 0; i < embellishments.length; i++) {
            uint256 childId = i + 1;
            assertEq(
                embellishmentsChild.getChildURI(childId),
                embellishments[i].uri
            );
            assertEq(
                embellishmentsChild.getChildPrice(childId),
                embellishments[i].price
            );
            assertEq(
                embellishmentsChild.getMaxPhysicalFulfillments(childId),
                embellishments[i].maxPhysical
            );
            assertTrue(embellishmentsChild.childExists(childId));
        }
    }

    function test_MinterAuthorization_MultipleMarkets() public {
        vm.prank(supplier1);
        uint256 childId = embellishmentsChild.createChild(
            "ipfs://buckles",
            CHILD_PRICE,
            1,
            MAX_PHYSICAL,
            new address[](0),
            0,
            new address[](0),
            false
        );

        vm.prank(market2);
        vm.expectRevert(FGOErrors.AddressInvalid.selector);
        embellishmentsChild.mintWithPhysicalRights(buyer1, childId, 5, 3);

        vm.prank(admin);
        accessControl.authorizeMarket(market2);

        vm.prank(market2);
        embellishmentsChild.mintWithPhysicalRights(buyer1, childId, 5, 3);

        assertEq(embellishmentsChild.balanceOf(buyer1, childId), 5);
        assertEq(embellishmentsChild.getPhysicalRights(buyer1, childId), 3);
    }

    function test_PhysicalScarcity_ComplexScenario() public {
        vm.prank(supplier1);
        uint256 childId = embellishmentsChild.createChild(
            "ipfs://vintage-buttons",
            CHILD_PRICE,
            1,
            25,
            new address[](0),
            0,
            new address[](0),
            false
        );

        address[] memory buyers = new address[](5);
        for (uint256 i = 0; i < 5; i++) {
            buyers[i] = makeAddr(
                string(abi.encodePacked("buyer", vm.toString(i)))
            );
        }

        vm.startPrank(market1);

        embellishmentsChild.mintWithPhysicalRights(buyers[0], childId, 10, 5);
        embellishmentsChild.mintWithPhysicalRights(buyers[1], childId, 8, 6);
        embellishmentsChild.mintWithPhysicalRights(buyers[2], childId, 15, 4);
        embellishmentsChild.mintWithPhysicalRights(buyers[3], childId, 12, 7);
        embellishmentsChild.mintWithPhysicalRights(buyers[4], childId, 20, 3);

        vm.stopPrank();

        assertEq(embellishmentsChild.getPhysicalFulfillments(childId), 25);
        assertFalse(embellishmentsChild.canFulfillPhysically(childId));
        assertEq(embellishmentsChild.getChildSupply(childId), 65);

        for (uint256 i = 0; i < 5; i++) {
            assertTrue(embellishmentsChild.balanceOf(buyers[i], childId) > 0);
            assertTrue(
                embellishmentsChild.getPhysicalRights(buyers[i], childId) > 0
            );
        }
    }

    function test_SupplierSpecialization_EmbellishmentTypes() public {
        vm.startPrank(supplier1);
        uint256 metalWork1 = embellishmentsChild.createChild(
            "ipfs://studs",
            100 * 10 ** 18,
            1,
            500,
            new address[](0),
            0,
            new address[](0),
            false
        );
        uint256 metalWork2 = embellishmentsChild.createChild(
            "ipfs://rivets",
            80 * 10 ** 18,
            1,
            750,
            new address[](0),
            0,
            new address[](0),
            false
        );
        vm.stopPrank();

        vm.startPrank(supplier2);
        uint256 textileWork1 = embellishmentsChild.createChild(
            "ipfs://beads",
            150 * 10 ** 18,
            1,
            300,
            new address[](0),
            0,
            new address[](0),
            false
        );
        uint256 textileWork2 = embellishmentsChild.createChild(
            "ipfs://sequins",
            200 * 10 ** 18,
            1,
            200,
            new address[](0),
            0,
            new address[](0),
            false
        );
        vm.stopPrank();

        assertEq(metalWork1, 1);
        assertEq(metalWork2, 2);
        assertEq(textileWork1, 3);
        assertEq(textileWork2, 4);

        assertEq(embellishmentsChild.getChildPrice(metalWork1), 100 * 10 ** 18);
        assertEq(
            embellishmentsChild.getChildPrice(textileWork1),
            150 * 10 ** 18
        );
        assertEq(
            embellishmentsChild.getMaxPhysicalFulfillments(metalWork1),
            500
        );
        assertEq(
            embellishmentsChild.getMaxPhysicalFulfillments(textileWork1),
            300
        );
    }

    function test_BatchMinting_DifferentEmbellishments() public {
        vm.startPrank(supplier1);
        uint256 childId1 = embellishmentsChild.createChild(
            "ipfs://type1",
            CHILD_PRICE,
            1,
            MAX_PHYSICAL,
            new address[](0),
            0,
            new address[](0),
            false
        );
        uint256 childId2 = embellishmentsChild.createChild(
            "ipfs://type2",
            CHILD_PRICE * 2,
            1,
            MAX_PHYSICAL,
            new address[](0),
            0,
            new address[](0),
            false
        );
        uint256 childId3 = embellishmentsChild.createChild(
            "ipfs://type3",
            CHILD_PRICE * 3,
            1,
            MAX_PHYSICAL,
            new address[](0),
            0,
            new address[](0),
            false
        );
        vm.stopPrank();

        vm.startPrank(market1);
        embellishmentsChild.mintWithPhysicalRights(buyer1, childId1, 10, 5);
        embellishmentsChild.mintWithPhysicalRights(buyer1, childId2, 15, 8);
        embellishmentsChild.mintWithPhysicalRights(buyer1, childId3, 20, 12);
        vm.stopPrank();

        assertEq(embellishmentsChild.balanceOf(buyer1, childId1), 10);
        assertEq(embellishmentsChild.balanceOf(buyer1, childId2), 15);
        assertEq(embellishmentsChild.balanceOf(buyer1, childId3), 20);

        assertEq(embellishmentsChild.getPhysicalRights(buyer1, childId1), 5);
        assertEq(embellishmentsChild.getPhysicalRights(buyer1, childId2), 8);
        assertEq(embellishmentsChild.getPhysicalRights(buyer1, childId3), 12);
    }

    function test_EdgeCases_PremiumEmbellishments() public {
        vm.prank(supplier1);
        uint256 childId = embellishmentsChild.createChild(
            "ipfs://diamond-encrusted",
            10000 * 10 ** 18,
            1,
            1,
            new address[](0),
            0,
            new address[](0),
            false
        );

        assertEq(embellishmentsChild.getChildPrice(childId), 10000 * 10 ** 18);
        assertEq(embellishmentsChild.getMaxPhysicalFulfillments(childId), 1);
        assertTrue(embellishmentsChild.canFulfillPhysically(childId));

        vm.prank(market1);
        embellishmentsChild.mintWithPhysicalRights(buyer1, childId, 1, 1);

        assertFalse(embellishmentsChild.canFulfillPhysically(childId));
        assertEq(embellishmentsChild.getPhysicalFulfillments(childId), 1);
    }

    function test_EdgeCases_FreeEmbellishments() public {
        vm.prank(supplier1);
        uint256 childId = embellishmentsChild.createChild(
            "ipfs://basic-buttons",
            0,
            1,
            0,
            new address[](0),
            0,
            new address[](0),
            false
        );

        assertEq(embellishmentsChild.getChildPrice(childId), 0);
        assertEq(embellishmentsChild.getMaxPhysicalFulfillments(childId), 0);
        assertTrue(embellishmentsChild.canFulfillPhysically(childId));

        vm.prank(market1);
        embellishmentsChild.mintWithPhysicalRights(buyer1, childId, 1000, 500);

        assertTrue(embellishmentsChild.canFulfillPhysically(childId));
        assertEq(embellishmentsChild.getPhysicalFulfillments(childId), 500);
    }

    function test_NonExistentEmbellishments_Queries() public view {
        assertEq(embellishmentsChild.getChildURI(999), "");
        assertEq(embellishmentsChild.getChildPrice(999), 0);
        assertEq(embellishmentsChild.getChildVersion(999), 0);
        assertEq(embellishmentsChild.getChildSupply(999), 0);
        assertFalse(embellishmentsChild.childExists(999));
        assertEq(embellishmentsChild.getMaxPhysicalFulfillments(999), 0);
        assertEq(embellishmentsChild.getPhysicalFulfillments(999), 0);
        assertTrue(embellishmentsChild.canFulfillPhysically(999));
    }

    function test_VersionTracking() public {
        vm.startPrank(supplier1);

        for (uint256 version = 1; version <= 5; version++) {
            uint256 childId = embellishmentsChild.createChild(
                string(
                    abi.encodePacked("ipfs://version", vm.toString(version))
                ),
                CHILD_PRICE * version,
                version,
                MAX_PHYSICAL * version,
                new address[](0),
                0,
                new address[](0),
                false
            );
            assertEq(embellishmentsChild.getChildVersion(childId), version);
        }

        vm.stopPrank();
    }
}
