// SPDX-License-Identifier: UNLICENSE
pragma solidity ^0.8.28;

import "forge-std/Test.sol";
import "../src/FGOAccessControl.sol";
import "../src/FGOErrors.sol";

contract FGOAccessControlTest is Test {
    FGOAccessControl public accessControl;
    
    address public admin = makeAddr("admin");
    address public designer1 = makeAddr("designer1");
    address public designer2 = makeAddr("designer2");
    address public supplier1 = makeAddr("supplier1");
    address public supplier2 = makeAddr("supplier2");
    address public fulfiller1 = makeAddr("fulfiller1");
    address public fulfiller2 = makeAddr("fulfiller2");
    address public market1 = makeAddr("market1");
    address public market2 = makeAddr("market2");
    address public unauthorizedUser = makeAddr("unauthorizedUser");

    event AdminAdded(address indexed admin);
    event AdminRemoved(address indexed admin);
    event DesignerAdded(address indexed designer);
    event DesignerRemoved(address indexed designer);
    event SupplierAdded(address indexed supplier);
    event SupplierRemoved(address indexed supplier);
    event FulfillerAdded(address indexed fulfiller);
    event FulfillerRemoved(address indexed fulfiller);
    event DesignerGatingToggled(bool isGated);
    event SupplierGatingToggled(bool isGated);
    event MarketAuthorized(address indexed market, bool status);

    function setUp() public {
        vm.prank(admin);
        accessControl = new FGOAccessControl();
    }

    function test_Constructor() public view {
        assertEq(accessControl.isAdmin(admin), true);
        assertEq(accessControl.isDesignerGated(), true);
        assertEq(accessControl.isSupplierGated(), true);
        assertEq(accessControl.symbol(), "FGOAC");
        assertEq(accessControl.name(), "FGOAccessControl");
    }

    function test_AddAdmin() public {
        vm.prank(admin);
        vm.expectEmit(true, false, false, false);
        emit AdminAdded(designer1);
        accessControl.addAdmin(designer1);
        
        assertEq(accessControl.isAdmin(designer1), true);
    }

    function test_AddAdmin_RevertIfNotAdmin() public {
        vm.prank(unauthorizedUser);
        vm.expectRevert(FGOErrors.AddressInvalid.selector);
        accessControl.addAdmin(designer1);
    }

    function test_AddAdmin_RevertIfAlreadyAdmin() public {
        vm.prank(admin);
        accessControl.addAdmin(designer1);
        
        vm.prank(admin);
        vm.expectRevert(FGOErrors.Existing.selector);
        accessControl.addAdmin(designer1);
    }

    function test_AddAdmin_RevertIfSelf() public {
        vm.prank(admin);
        vm.expectRevert(FGOErrors.Existing.selector);
        accessControl.addAdmin(admin);
    }

    function test_RemoveAdmin() public {
        vm.prank(admin);
        accessControl.addAdmin(designer1);
        
        vm.prank(admin);
        vm.expectEmit(true, false, false, false);
        emit AdminRemoved(designer1);
        accessControl.removeAdmin(designer1);
        
        assertEq(accessControl.isAdmin(designer1), false);
    }

    function test_RemoveAdmin_RevertIfNotAdmin() public {
        vm.prank(unauthorizedUser);
        vm.expectRevert(FGOErrors.AddressInvalid.selector);
        accessControl.removeAdmin(designer1);
    }

    function test_RemoveAdmin_RevertIfSelf() public {
        vm.prank(admin);
        vm.expectRevert(FGOErrors.CantRemoveSelf.selector);
        accessControl.removeAdmin(admin);
    }

    function test_RemoveAdmin_RevertIfNotCurrentlyAdmin() public {
        vm.prank(admin);
        vm.expectRevert(FGOErrors.AddressInvalid.selector);
        accessControl.removeAdmin(designer1);
    }

    function test_AddDesigner() public {
        vm.prank(admin);
        vm.expectEmit(true, false, false, false);
        emit DesignerAdded(designer1);
        accessControl.addDesigner(designer1);
        
        assertEq(accessControl.isDesigner(designer1), true);
        assertEq(accessControl.isAdminOrDesigner(designer1), true);
    }

    function test_AddDesigner_RevertIfNotAdmin() public {
        vm.prank(unauthorizedUser);
        vm.expectRevert(FGOErrors.AddressInvalid.selector);
        accessControl.addDesigner(designer1);
    }

    function test_AddDesigner_RevertIfAlreadyDesigner() public {
        vm.prank(admin);
        accessControl.addDesigner(designer1);
        
        vm.prank(admin);
        vm.expectRevert(FGOErrors.Existing.selector);
        accessControl.addDesigner(designer1);
    }

    function test_RemoveDesigner() public {
        vm.prank(admin);
        accessControl.addDesigner(designer1);
        
        vm.prank(admin);
        vm.expectEmit(true, false, false, false);
        emit DesignerRemoved(designer1);
        accessControl.removeDesigner(designer1);
        
        assertEq(accessControl.isDesigner(designer1), false);
        assertEq(accessControl.isAdminOrDesigner(designer1), false);
    }

    function test_AddSupplier() public {
        vm.prank(admin);
        vm.expectEmit(true, false, false, false);
        emit SupplierAdded(supplier1);
        accessControl.addSupplier(supplier1);
        
        assertEq(accessControl.isSupplier(supplier1), true);
        assertEq(accessControl.isAdminOrSupplier(supplier1), true);
    }

    function test_AddSupplier_RevertIfNotAdmin() public {
        vm.prank(unauthorizedUser);
        vm.expectRevert(FGOErrors.AddressInvalid.selector);
        accessControl.addSupplier(supplier1);
    }

    function test_AddSupplier_RevertIfAlreadySupplier() public {
        vm.prank(admin);
        accessControl.addSupplier(supplier1);
        
        vm.prank(admin);
        vm.expectRevert(FGOErrors.Existing.selector);
        accessControl.addSupplier(supplier1);
    }

    function test_RemoveSupplier() public {
        vm.prank(admin);
        accessControl.addSupplier(supplier1);
        
        vm.prank(admin);
        vm.expectEmit(true, false, false, false);
        emit SupplierRemoved(supplier1);
        accessControl.removeSupplier(supplier1);
        
        assertEq(accessControl.isSupplier(supplier1), false);
        assertEq(accessControl.isAdminOrSupplier(supplier1), false);
    }

    function test_AddFulfiller() public {
        vm.prank(admin);
        vm.expectEmit(true, false, false, false);
        emit FulfillerAdded(fulfiller1);
        accessControl.addFulfiller(fulfiller1);
        
        assertEq(accessControl.isFulfiller(fulfiller1), true);
    }

    function test_ToggleDesignerGating() public {
        assertEq(accessControl.isDesignerGated(), true);
        
        vm.prank(admin);
        vm.expectEmit(false, false, false, true);
        emit DesignerGatingToggled(false);
        accessControl.toggleDesignerGating();
        
        assertEq(accessControl.isDesignerGated(), false);
        
        vm.prank(admin);
        vm.expectEmit(false, false, false, true);
        emit DesignerGatingToggled(true);
        accessControl.toggleDesignerGating();
        
        assertEq(accessControl.isDesignerGated(), true);
    }

    function test_ToggleSupplierGating() public {
        assertEq(accessControl.isSupplierGated(), true);
        
        vm.prank(admin);
        vm.expectEmit(false, false, false, true);
        emit SupplierGatingToggled(false);
        accessControl.toggleSupplierGating();
        
        assertEq(accessControl.isSupplierGated(), false);
        
        vm.prank(admin);
        vm.expectEmit(false, false, false, true);
        emit SupplierGatingToggled(true);
        accessControl.toggleSupplierGating();
        
        assertEq(accessControl.isSupplierGated(), true);
    }

    function test_CanCreateDesigns_WithGatingEnabled() public {
        assertEq(accessControl.isDesignerGated(), true);
        
        assertEq(accessControl.canCreateDesigns(admin), true);
        assertEq(accessControl.canCreateDesigns(unauthorizedUser), false);
        
        vm.prank(admin);
        accessControl.addDesigner(designer1);
        assertEq(accessControl.canCreateDesigns(designer1), true);
    }

    function test_CanCreateDesigns_WithGatingDisabled() public {
        vm.prank(admin);
        accessControl.toggleDesignerGating();
        
        assertEq(accessControl.canCreateDesigns(admin), true);
        assertEq(accessControl.canCreateDesigns(unauthorizedUser), true);
        assertEq(accessControl.canCreateDesigns(designer1), true);
    }

    function test_CanCreateChildren_WithGatingEnabled() public {
        assertEq(accessControl.isSupplierGated(), true);
        
        assertEq(accessControl.canCreateChildren(admin), true);
        assertEq(accessControl.canCreateChildren(unauthorizedUser), false);
        
        vm.prank(admin);
        accessControl.addSupplier(supplier1);
        assertEq(accessControl.canCreateChildren(supplier1), true);
    }

    function test_CanCreateChildren_WithGatingDisabled() public {
        vm.prank(admin);
        accessControl.toggleSupplierGating();
        
        assertEq(accessControl.canCreateChildren(admin), true);
        assertEq(accessControl.canCreateChildren(unauthorizedUser), true);
        assertEq(accessControl.canCreateChildren(supplier1), true);
    }

    function test_AuthorizeMarket() public {
        vm.prank(admin);
        vm.expectEmit(true, false, false, true);
        emit MarketAuthorized(market1, true);
        accessControl.authorizeMarket(market1);
        
        assertEq(accessControl.isAuthorizedMarket(market1), true);
    }

    function test_RevokeMarket() public {
        vm.prank(admin);
        accessControl.authorizeMarket(market1);
        
        vm.prank(admin);
        vm.expectEmit(true, false, false, true);
        emit MarketAuthorized(market1, false);
        accessControl.revokeMarket(market1);
        
        assertEq(accessControl.isAuthorizedMarket(market1), false);
    }

    function test_RolesSeparation() public {
        vm.startPrank(admin);
        accessControl.addDesigner(designer1);
        accessControl.addSupplier(supplier1);
        accessControl.addFulfiller(fulfiller1);
        vm.stopPrank();
        
        assertEq(accessControl.isDesigner(designer1), true);
        assertEq(accessControl.isSupplier(designer1), false);
        assertEq(accessControl.isFulfiller(designer1), false);
        
        assertEq(accessControl.isDesigner(supplier1), false);
        assertEq(accessControl.isSupplier(supplier1), true);
        assertEq(accessControl.isFulfiller(supplier1), false);
        
        assertEq(accessControl.isDesigner(fulfiller1), false);
        assertEq(accessControl.isSupplier(fulfiller1), false);
        assertEq(accessControl.isFulfiller(fulfiller1), true);
    }

    function test_AdminHasAllPermissions() public view {
        assertEq(accessControl.canCreateDesigns(admin), true);
        assertEq(accessControl.canCreateChildren(admin), true);
        assertEq(accessControl.isAdminOrDesigner(admin), true);
        assertEq(accessControl.isAdminOrSupplier(admin), true);
    }

    function test_MultipleRolesManagement() public {
        vm.startPrank(admin);
        
        accessControl.addDesigner(designer1);
        accessControl.addDesigner(designer2);
        accessControl.addSupplier(supplier1);
        accessControl.addSupplier(supplier2);
        accessControl.addFulfiller(fulfiller1);
        accessControl.addFulfiller(fulfiller2);
        
        vm.stopPrank();
        
        assertEq(accessControl.isDesigner(designer1), true);
        assertEq(accessControl.isDesigner(designer2), true);
        assertEq(accessControl.isSupplier(supplier1), true);
        assertEq(accessControl.isSupplier(supplier2), true);
        assertEq(accessControl.isFulfiller(fulfiller1), true);
        assertEq(accessControl.isFulfiller(fulfiller2), true);
        
        vm.prank(admin);
        accessControl.removeDesigner(designer1);
        assertEq(accessControl.isDesigner(designer1), false);
        assertEq(accessControl.isDesigner(designer2), true);
    }

    function test_UnauthorizedActionsRevert() public {
        vm.startPrank(unauthorizedUser);
        
        vm.expectRevert(FGOErrors.AddressInvalid.selector);
        accessControl.addDesigner(designer1);
        
        vm.expectRevert(FGOErrors.AddressInvalid.selector);
        accessControl.addSupplier(supplier1);
        
        vm.expectRevert(FGOErrors.AddressInvalid.selector);
        accessControl.addFulfiller(fulfiller1);
        
        vm.expectRevert(FGOErrors.AddressInvalid.selector);
        accessControl.toggleDesignerGating();
        
        vm.expectRevert(FGOErrors.AddressInvalid.selector);
        accessControl.toggleSupplierGating();
        
        vm.expectRevert(FGOErrors.AddressInvalid.selector);
        accessControl.authorizeMarket(market1);
        
        vm.stopPrank();
    }
}