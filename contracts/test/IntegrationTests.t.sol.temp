// SPDX-License-Identifier: UNLICENSE
pragma solidity ^0.8.28;

import "forge-std/Test.sol";
import "../src/FGOAccessControl.sol";
import "../src/FGOMarket.sol";
import "../src/FGOParent.sol";
import "../src/FGOPatternChild.sol";
import "../src/FGOMaterialChild.sol";
import "../src/FGOPrintDesignChild.sol";
import "../src/FGOEmbellishmentsChild.sol";
import "../src/FGOConstructionChild.sol";
import "../src/FGODigitalEffectsChild.sol";
import "../src/FGOFinishingTreatmentsChild.sol";
import "../src/FGOTemplatePackChild.sol";
import "../src/FGOWorkflowExecutor.sol";
import "../src/CustomCompositeNFT.sol";
import "../src/FGOSplitsData.sol";
import "../src/FGOFulfillers.sol";
import "../src/FGOSuppliers.sol";
import "../src/FGODesigners.sol";
import "../src/FGOLibrary.sol";
import "../src/FGOErrors.sol";
import "../src/TestToken.sol";

contract IntegrationTest is Test {
    FGOAccessControl public accessControl;
    FGOMarket public market;
    FGOParent public parentFGO;
    FGOPatternChild public patternChild;
    FGOMaterialChild public materialChild;
    FGOPrintDesignChild public printDesignChild;
    FGOEmbellishmentsChild public embellishmentsChild;
    FGOConstructionChild public constructionChild;
    FGODigitalEffectsChild public digitalEffectsChild;
    FGOFinishingTreatmentsChild public finishingTreatmentsChild;
    FGOTemplatePackChild public templatePackChild;
    FGOWorkflowExecutor public workflowExecutor;
    CustomCompositeNFT public customComposite;
    FGOSplitsData public splitsData;
    FGOFulfillers public fulfillers;
    FGOSuppliers public suppliers;
    FGODesigners public designers;
    TestToken public testToken;
    
    address public admin = makeAddr("admin");
    address public supplier1 = makeAddr("supplier1");
    address public supplier2 = makeAddr("supplier2");
    address public designer1 = makeAddr("designer1");
    address public designer2 = makeAddr("designer2");
    address public fulfiller1 = makeAddr("fulfiller1");
    address public fulfiller2 = makeAddr("fulfiller2");
    address public buyer1 = makeAddr("buyer1");
    address public buyer2 = makeAddr("buyer2");
    address public unauthorizedUser = makeAddr("unauthorizedUser");

    uint256 public constant PARENT_PRICE = 1000 * 10**18;
    uint256 public constant PATTERN_PRICE = 100 * 10**18;
    uint256 public constant MATERIAL_PRICE = 50 * 10**18;
    uint256 public constant PRINT_PRICE = 75 * 10**18;
    uint256 public constant EMBELLISH_PRICE = 200 * 10**18;

    function setUp() public {
        vm.prank(admin);
        accessControl = new FGOAccessControl();
        
        vm.startPrank(admin);
        accessControl.addSupplier(supplier1);
        accessControl.addSupplier(supplier2);
        accessControl.addDesigner(designer1);
        accessControl.addDesigner(designer2);
        accessControl.addFulfiller(fulfiller1);
        accessControl.addFulfiller(fulfiller2);
        vm.stopPrank();

        patternChild = new FGOPatternChild(address(accessControl));
        materialChild = new FGOMaterialChild(address(accessControl));
        printDesignChild = new FGOPrintDesignChild(address(accessControl));
        embellishmentsChild = new FGOEmbellishmentsChild(address(accessControl));
        constructionChild = new FGOConstructionChild(address(accessControl));
        digitalEffectsChild = new FGODigitalEffectsChild(address(accessControl));
        finishingTreatmentsChild = new FGOFinishingTreatmentsChild(address(accessControl));
        templatePackChild = new FGOTemplatePackChild(address(accessControl));

        parentFGO = new FGOParent(address(accessControl));
        customComposite = new CustomCompositeNFT(address(accessControl));
        splitsData = new FGOSplitsData(address(accessControl));
        fulfillers = new FGOFulfillers(address(accessControl));
        suppliers = new FGOSuppliers(address(accessControl));
        designers = new FGODesigners(address(accessControl), address(parentFGO));
        workflowExecutor = new FGOWorkflowExecutor(address(accessControl), address(parentFGO), address(fulfillers));

        market = new FGOMarket(
            address(accessControl),
            address(customComposite),
            address(parentFGO),
            address(splitsData),
            address(fulfillers),
            address(patternChild),
            address(materialChild),
            address(printDesignChild),
            address(embellishmentsChild),
            address(constructionChild),
            address(digitalEffectsChild),
            address(finishingTreatmentsChild),
            address(templatePackChild),
            address(workflowExecutor)
        );

        vm.startPrank(admin);
        customComposite.authorizeMarket(address(market));
        customComposite.setParentFGO(address(parentFGO));
        accessControl.authorizeMarket(address(market));
        patternChild.authorizeMinter(address(market));
        materialChild.authorizeMinter(address(market));
        printDesignChild.authorizeMinter(address(market));
        embellishmentsChild.authorizeMinter(address(market));
        constructionChild.authorizeMinter(address(market));
        digitalEffectsChild.authorizeMinter(address(market));
        finishingTreatmentsChild.authorizeMinter(address(market));
        templatePackChild.authorizeMinter(address(market));
        vm.stopPrank();

        testToken = new TestToken();
        vm.prank(admin);
        splitsData.addCurrency(address(testToken), 10**18, 1 * 10**18);

        testToken.mint(buyer1, 1000000 * 10**18);
        testToken.mint(buyer2, 1000000 * 10**18);

        vm.prank(buyer1);
        testToken.approve(address(market), type(uint256).max);
        vm.prank(buyer2);
        testToken.approve(address(market), type(uint256).max);

        vm.prank(fulfiller1);
        fulfillers.createProfile("ipfs://fulfiller1");
        vm.prank(fulfiller2);
        fulfillers.createProfile("ipfs://fulfiller2");

        vm.prank(supplier1);
        suppliers.registerSupplier("ipfs://supplier1", 1);
        vm.prank(supplier2);
        suppliers.registerSupplier("ipfs://supplier2", 1);

        vm.prank(designer1);
        designers.createProfile("ipfs://designer1");
        vm.prank(designer2);
        designers.createProfile("ipfs://designer2");
    }

    function createBasicWorkflow() internal view returns (FGOLibrary.FulfillmentWorkflow memory) {
        FGOLibrary.FulfillmentStep[] memory steps = new FGOLibrary.FulfillmentStep[](1);
        
        steps[0] = FGOLibrary.FulfillmentStep({
            primaryPerformer: fulfiller1,
            subPerformers: new FGOLibrary.SubPerformer[](0),
            requiredChildIds: new uint256[](0),
            shipToNext: buyer1,
            instructions: "Complete workflow",
            paymentBasisPoints: 10000,
            isOptional: false,
            instructionsVersion: 1
        });
        
        return FGOLibrary.FulfillmentWorkflow({
            steps: steps,
            finalRecipient: buyer1,
            estimatedDays: 30
        });
    }

    function test_CompleteEndToEndFlow_RoleVerification() public {
        vm.startPrank(supplier1);
        patternChild.createPattern("ipfs://pattern1", PATTERN_PRICE, 1, 100);
        materialChild.createMaterial("ipfs://material1", MATERIAL_PRICE, 1, 200);
        vm.stopPrank();

        vm.startPrank(supplier2);
        printDesignChild.createPrintDesign("ipfs://print1", PRINT_PRICE, 1, 50);
        embellishmentsChild.createEmbellishments("ipfs://embellish1", EMBELLISH_PRICE, 1, 75);
        vm.stopPrank();

        vm.startPrank(admin);
        suppliers.addChildToSupplier(supplier1, 1);
        suppliers.addChildToSupplier(supplier1, 1);
        suppliers.addChildToSupplier(supplier2, 1);
        suppliers.addChildToSupplier(supplier2, 1);
        vm.stopPrank();

        FGOLibrary.ChildPlacement[] memory placements = new FGOLibrary.ChildPlacement[](4);
        
        placements[0] = FGOLibrary.ChildPlacement({
            childId: 1,
            placementURI: "ipfs://placement1",
            childType: FGOLibrary.ChildType.PATTERN,
            childContract: address(patternChild),
            amount: 2
        });
        
        placements[1] = FGOLibrary.ChildPlacement({
            childId: 1,
            placementURI: "ipfs://placement2",
            childType: FGOLibrary.ChildType.MATERIAL,
            childContract: address(materialChild),
            amount: 3
        });
        
        placements[2] = FGOLibrary.ChildPlacement({
            childId: 1,
            placementURI: "ipfs://placement3",
            childType: FGOLibrary.ChildType.PRINT_DESIGN,
            childContract: address(printDesignChild),
            amount: 1
        });
        
        placements[3] = FGOLibrary.ChildPlacement({
            childId: 1,
            placementURI: "ipfs://placement4",
            childType: FGOLibrary.ChildType.EMBELLISHMENTS,
            childContract: address(embellishmentsChild),
            amount: 2
        });

        vm.prank(designer1);
        uint256 parentTokenId = parentFGO.createDesign(
            placements, "ipfs://parent1", PARENT_PRICE, 1,
            FGOLibrary.ParentType.BOTH, createBasicWorkflow(), 0,
            new address[](0), 0
        );


        vm.prank(buyer1);
        market.buyDesign(parentTokenId, "ipfs://custom1", 1, address(testToken), true);

        assertEq(parentFGO.ownerOf(1), designer1);
        assertEq(customComposite.ownerOf(1), buyer1);
        
        assertEq(patternChild.balanceOf(buyer1, 1), 2);
        assertEq(materialChild.balanceOf(buyer1, 1), 3);
        assertEq(printDesignChild.balanceOf(buyer1, 1), 1);
        assertEq(embellishmentsChild.balanceOf(buyer1, 1), 2);
        
        assertEq(patternChild.getPhysicalRights(buyer1, 1), 2);
        assertEq(materialChild.getPhysicalRights(buyer1, 1), 3);
        assertEq(printDesignChild.getPhysicalRights(buyer1, 1), 1);
        assertEq(embellishmentsChild.getPhysicalRights(buyer1, 1), 2);
        
        assertEq(patternChild.getPhysicalFulfillments(1), 2);
        assertEq(materialChild.getPhysicalFulfillments(1), 3);
        assertEq(printDesignChild.getPhysicalFulfillments(1), 1);
        assertEq(embellishmentsChild.getPhysicalFulfillments(1), 2);
        
        assertEq(suppliers.getSupplierChildrenCount(supplier1), 2);
        assertEq(suppliers.getSupplierChildrenCount(supplier2), 2);
        
        assertTrue(testToken.balanceOf(address(workflowExecutor)) > 0);
    }

    function test_RoleEnforcement_CrossBoundaries() public {
        vm.prank(supplier1);
        vm.expectRevert(FGOErrors.AddressInvalid.selector);
        parentFGO.createDesign(
            new FGOLibrary.ChildPlacement[](0), "ipfs://parent1", PARENT_PRICE, 1,
            FGOLibrary.ParentType.DIGITAL_ONLY, FGOLibrary.FulfillmentWorkflow({
                steps: new FGOLibrary.FulfillmentStep[](0),
                finalRecipient: address(0),
                estimatedDays: 0
            }), 0,
            new address[](0), 0
        );

        vm.prank(designer1);
        vm.expectRevert(FGOErrors.AddressInvalid.selector);
        patternChild.createPattern("ipfs://pattern1", PATTERN_PRICE, 1, 0);

        vm.prank(fulfiller1);
        vm.expectRevert(FGOErrors.AddressInvalid.selector);
        patternChild.createPattern("ipfs://pattern1", PATTERN_PRICE, 1, 0);

        vm.prank(fulfiller1);
        vm.expectRevert(FGOErrors.AddressInvalid.selector);
        parentFGO.createDesign(
            new FGOLibrary.ChildPlacement[](0), "ipfs://parent1", PARENT_PRICE, 1,
            FGOLibrary.ParentType.DIGITAL_ONLY, FGOLibrary.FulfillmentWorkflow({
                steps: new FGOLibrary.FulfillmentStep[](0),
                finalRecipient: address(0),
                estimatedDays: 0
            }), 0,
            new address[](0), 0
        );

        vm.prank(unauthorizedUser);
        vm.expectRevert(FGOErrors.AddressInvalid.selector);
        patternChild.createPattern("ipfs://pattern1", PATTERN_PRICE, 1, 0);

        vm.prank(unauthorizedUser);
        vm.expectRevert(FGOErrors.AddressInvalid.selector);
        parentFGO.createDesign(
            new FGOLibrary.ChildPlacement[](0), "ipfs://parent1", PARENT_PRICE, 1,
            FGOLibrary.ParentType.DIGITAL_ONLY, FGOLibrary.FulfillmentWorkflow({
                steps: new FGOLibrary.FulfillmentStep[](0),
                finalRecipient: address(0),
                estimatedDays: 0
            }), 0,
            new address[](0), 0
        );
    }

    function test_MultiSupplierMultiDesigner_Ecosystem() public {
        vm.startPrank(supplier1);
        patternChild.createPattern("ipfs://pattern1", PATTERN_PRICE, 1, 100);
        patternChild.createPattern("ipfs://pattern2", PATTERN_PRICE * 2, 1, 150);
        materialChild.createMaterial("ipfs://material1", MATERIAL_PRICE, 1, 200);
        vm.stopPrank();

        vm.startPrank(supplier2);
        printDesignChild.createPrintDesign("ipfs://print1", PRINT_PRICE, 1, 50);
        embellishmentsChild.createEmbellishments("ipfs://embellish1", EMBELLISH_PRICE, 1, 75);
        constructionChild.createConstruction("ipfs://construct1", 150 * 10**18, 1, 0);
        vm.stopPrank();

        vm.startPrank(admin);
        suppliers.addChildToSupplier(supplier1, 1);
        suppliers.addChildToSupplier(supplier1, 2);
        suppliers.addChildToSupplier(supplier1, 1);
        suppliers.addChildToSupplier(supplier2, 1);
        suppliers.addChildToSupplier(supplier2, 1);
        suppliers.addChildToSupplier(supplier2, 1);
        vm.stopPrank();

        FGOLibrary.ChildPlacement[] memory placements1 = new FGOLibrary.ChildPlacement[](2);
        placements1[0] = FGOLibrary.ChildPlacement({
            childId: 1, placementURI: "ipfs://placement1",
            childType: FGOLibrary.ChildType.PATTERN,
            childContract: address(patternChild), amount: 1
        });
        placements1[1] = FGOLibrary.ChildPlacement({
            childId: 1, placementURI: "ipfs://placement2",
            childType: FGOLibrary.ChildType.MATERIAL,
            childContract: address(materialChild), amount: 2
        });

        vm.prank(designer1);
        uint256 parent1 = parentFGO.createDesign(
            placements1, "ipfs://parent1", PARENT_PRICE, 1,
            FGOLibrary.ParentType.BOTH, createBasicWorkflow(), 0,
            new address[](0), 0
        );

        FGOLibrary.ChildPlacement[] memory placements2 = new FGOLibrary.ChildPlacement[](3);
        placements2[0] = FGOLibrary.ChildPlacement({
            childId: 1, placementURI: "ipfs://placement3",
            childType: FGOLibrary.ChildType.PRINT_DESIGN,
            childContract: address(printDesignChild), amount: 1
        });
        placements2[1] = FGOLibrary.ChildPlacement({
            childId: 1, placementURI: "ipfs://placement4",
            childType: FGOLibrary.ChildType.EMBELLISHMENTS,
            childContract: address(embellishmentsChild), amount: 3
        });
        placements2[2] = FGOLibrary.ChildPlacement({
            childId: 1, placementURI: "ipfs://placement5",
            childType: FGOLibrary.ChildType.CONSTRUCTION,
            childContract: address(constructionChild), amount: 1
        });

        vm.prank(designer2);
        uint256 parent2 = parentFGO.createDesign(
            placements2, "ipfs://parent2", PARENT_PRICE * 2, 1,
            FGOLibrary.ParentType.BOTH, createBasicWorkflow(), 0,
            new address[](0), 0
        );

        vm.prank(buyer1);
        market.buyDesign(parent1, "ipfs://buyer1-purchase1", 1, address(testToken), false);

        vm.prank(buyer2);
        market.buyDesign(parent2, "ipfs://buyer2-purchase1", 1, address(testToken), true);

        assertEq(parentFGO.ownerOf(1), designer1);
        assertEq(parentFGO.ownerOf(2), designer2);
        assertEq(customComposite.ownerOf(1), buyer1);
        assertEq(customComposite.ownerOf(2), buyer2);

        assertEq(suppliers.getSupplierChildrenCount(supplier1), 3);
        assertEq(suppliers.getSupplierChildrenCount(supplier2), 3);

        uint256[] memory designer1Designs = parentFGO.getDesignerDesigns(designer1);
        uint256[] memory designer2Designs = parentFGO.getDesignerDesigns(designer2);
        assertEq(designer1Designs.length, 1);
        assertEq(designer2Designs.length, 1);
    }

    function test_PhysicalScarcityAcrossEcosystem() public {
        vm.startPrank(supplier1);
        patternChild.createPattern("ipfs://pattern1", PATTERN_PRICE, 1, 10);
        materialChild.createMaterial("ipfs://material1", MATERIAL_PRICE, 1, 15);
        vm.stopPrank();

        FGOLibrary.ChildPlacement[] memory placements1 = new FGOLibrary.ChildPlacement[](2);
        placements1[0] = FGOLibrary.ChildPlacement({
            childId: 1, placementURI: "ipfs://placement1",
            childType: FGOLibrary.ChildType.PATTERN,
            childContract: address(patternChild), amount: 3
        });
        placements1[1] = FGOLibrary.ChildPlacement({
            childId: 1, placementURI: "ipfs://placement2",
            childType: FGOLibrary.ChildType.MATERIAL,
            childContract: address(materialChild), amount: 5
        });

        vm.prank(designer1);
        uint256 parent1 = parentFGO.createDesign(
            placements1, "ipfs://parent1", PARENT_PRICE, 1,
            FGOLibrary.ParentType.BOTH, createBasicWorkflow(), 0,
            new address[](0), 0
        );

        vm.prank(designer2);
        uint256 parent2 = parentFGO.createDesign(
            placements1, "ipfs://parent2", PARENT_PRICE, 1,
            FGOLibrary.ParentType.BOTH, createBasicWorkflow(), 0,
            new address[](0), 0
        );

        vm.prank(buyer1);
        market.buyDesign(parent1, "ipfs://purchase1", 1, address(testToken), true);
        
        vm.prank(buyer1);
        market.buyDesign(parent1, "ipfs://purchase2", 1, address(testToken), true);
        
        vm.prank(buyer1);
        market.buyDesign(parent1, "ipfs://purchase3", 1, address(testToken), true);

        vm.prank(buyer1);
        vm.expectRevert(FGOErrors.MaxSupplyReached.selector);
        market.buyDesign(parent1, "ipfs://purchase4", 1, address(testToken), true);

        vm.prank(buyer2);
        vm.expectRevert(FGOErrors.MaxSupplyReached.selector);
        market.buyDesign(parent2, "ipfs://purchase5", 1, address(testToken), true);

        assertEq(patternChild.getPhysicalFulfillments(1), 9);
        assertEq(patternChild.canFulfillPhysically(1), true);
        assertEq(materialChild.getPhysicalFulfillments(1), 15);
        assertEq(materialChild.canFulfillPhysically(1), false);
    }

    function test_ProfileManagement_Integration() public {
        vm.prank(admin);
        accessControl.authorizeMarket(address(market));
        
        vm.prank(supplier1);
        suppliers.updateSupplierURI("ipfs://supplier1-v2", 2);
        assertEq(suppliers.getSupplierURI(supplier1), "ipfs://supplier1-v2");
        assertEq(suppliers.getSupplierVersion(supplier1), 2);

        assertTrue(designers.getDesignerIdByAddress(designer1) > 0);

        vm.prank(supplier1);
        patternChild.createPattern("ipfs://pattern1", PATTERN_PRICE, 1, 0);

        FGOLibrary.ChildPlacement[] memory placements = new FGOLibrary.ChildPlacement[](1);
        placements[0] = FGOLibrary.ChildPlacement({
            childId: 1, placementURI: "ipfs://placement1",
            childType: FGOLibrary.ChildType.PATTERN,
            childContract: address(patternChild), amount: 1
        });

        vm.prank(designer1);
        parentFGO.createDesign(
            placements, "ipfs://parent1", PARENT_PRICE, 1,
            FGOLibrary.ParentType.DIGITAL_ONLY, FGOLibrary.FulfillmentWorkflow({
                steps: new FGOLibrary.FulfillmentStep[](0),
                finalRecipient: address(0),
                estimatedDays: 0
            }), 0,
            new address[](0), 0
        );

        assertEq(patternChild.childExists(1), true);
        assertEq(parentFGO.designExists(1), true);
        
        vm.prank(admin);
        suppliers.addChildToSupplier(supplier1, 1);
        assertEq(suppliers.getSupplierChildrenCount(supplier1), 1);
    }

    function test_GatingToggle_SystemWide() public {
        vm.startPrank(admin);
        accessControl.toggleSupplierGating();
        accessControl.toggleDesignerGating();
        vm.stopPrank();

        vm.prank(unauthorizedUser);
        uint256 childId = patternChild.createPattern("ipfs://pattern-open", PATTERN_PRICE, 1, 0);
        assertEq(patternChild.childExists(childId), true);

        FGOLibrary.ChildPlacement[] memory placements = new FGOLibrary.ChildPlacement[](1);
        placements[0] = FGOLibrary.ChildPlacement({
            childId: childId, placementURI: "ipfs://placement1",
            childType: FGOLibrary.ChildType.PATTERN,
            childContract: address(patternChild), amount: 1
        });

        vm.prank(unauthorizedUser);
        uint256 parentId = parentFGO.createDesign(
            placements, "ipfs://parent-open", PARENT_PRICE, 1,
            FGOLibrary.ParentType.DIGITAL_ONLY, FGOLibrary.FulfillmentWorkflow({
                steps: new FGOLibrary.FulfillmentStep[](0),
                finalRecipient: address(0),
                estimatedDays: 0
            }), 0,
            new address[](0), 0
        );

        assertEq(parentFGO.ownerOf(parentId), unauthorizedUser);

        vm.startPrank(admin);
        accessControl.toggleSupplierGating();
        accessControl.toggleDesignerGating();
        vm.stopPrank();

        vm.prank(unauthorizedUser);
        vm.expectRevert(FGOErrors.AddressInvalid.selector);
        patternChild.createPattern("ipfs://pattern-restricted", PATTERN_PRICE, 1, 0);
    }

    function test_MarketAuthorization_Integration() public {
        vm.prank(supplier1);
        patternChild.createPattern("ipfs://pattern1", PATTERN_PRICE, 1, 0);

        vm.prank(admin);
        patternChild.revokeMinter(address(market));

        FGOLibrary.ChildPlacement[] memory placements = new FGOLibrary.ChildPlacement[](1);
        placements[0] = FGOLibrary.ChildPlacement({
            childId: 1, placementURI: "ipfs://placement1",
            childType: FGOLibrary.ChildType.PATTERN,
            childContract: address(patternChild), amount: 1
        });

        vm.prank(designer1);
        uint256 parentId = parentFGO.createDesign(
            placements, "ipfs://parent1", PARENT_PRICE, 1,
            FGOLibrary.ParentType.DIGITAL_ONLY, FGOLibrary.FulfillmentWorkflow({
                steps: new FGOLibrary.FulfillmentStep[](0),
                finalRecipient: address(0),
                estimatedDays: 0
            }), 0,
            new address[](0), 0
        );

        vm.prank(buyer1);
        vm.expectRevert(FGOErrors.AddressInvalid.selector);
        market.buyDesign(parentId, "ipfs://custom1", 1, address(testToken), false);

        vm.prank(admin);
        patternChild.authorizeMinter(address(market));

        vm.prank(buyer1);
        market.buyDesign(parentId, "ipfs://custom1", 1, address(testToken), false);

        assertEq(patternChild.balanceOf(buyer1, 1), 1);
    }

    function test_ComplexSupplyChain_RealWorldScenario() public {
        vm.startPrank(supplier1);
        patternChild.createPattern("ipfs://basic-tee-pattern", 100 * 10**18, 1, 1000);
        materialChild.createMaterial("ipfs://organic-cotton", 75 * 10**18, 1, 500);
        materialChild.createMaterial("ipfs://bamboo-fiber", 90 * 10**18, 1, 300);
        vm.stopPrank();

        vm.startPrank(supplier2);
        printDesignChild.createPrintDesign("ipfs://logo-design", 125 * 10**18, 1, 200);
        embellishmentsChild.createEmbellishments("ipfs://metal-studs", 200 * 10**18, 1, 150);
        finishingTreatmentsChild.createFinishingTreatments("ipfs://vintage-wash", 175 * 10**18, 1, 100);
        vm.stopPrank();

        FGOLibrary.ChildPlacement[] memory basicPlacements = new FGOLibrary.ChildPlacement[](3);
        basicPlacements[0] = FGOLibrary.ChildPlacement({
            childId: 1, placementURI: "ipfs://pattern-placement",
            childType: FGOLibrary.ChildType.PATTERN,
            childContract: address(patternChild), amount: 1
        });
        basicPlacements[1] = FGOLibrary.ChildPlacement({
            childId: 1, placementURI: "ipfs://cotton-placement",
            childType: FGOLibrary.ChildType.MATERIAL,
            childContract: address(materialChild), amount: 2
        });
        basicPlacements[2] = FGOLibrary.ChildPlacement({
            childId: 1, placementURI: "ipfs://logo-placement",
            childType: FGOLibrary.ChildType.PRINT_DESIGN,
            childContract: address(printDesignChild), amount: 1
        });

        vm.prank(designer1);
        uint256 basicDesign = parentFGO.createDesign(
            basicPlacements, "ipfs://basic-tee", 300 * 10**18, 1,
            FGOLibrary.ParentType.BOTH, createBasicWorkflow(), 0,
            new address[](0), 0
        );

        FGOLibrary.ChildPlacement[] memory premiumPlacements = new FGOLibrary.ChildPlacement[](5);
        premiumPlacements[0] = FGOLibrary.ChildPlacement({
            childId: 1, placementURI: "ipfs://pattern-placement",
            childType: FGOLibrary.ChildType.PATTERN,
            childContract: address(patternChild), amount: 1
        });
        premiumPlacements[1] = FGOLibrary.ChildPlacement({
            childId: 2, placementURI: "ipfs://bamboo-placement",
            childType: FGOLibrary.ChildType.MATERIAL,
            childContract: address(materialChild), amount: 3
        });
        premiumPlacements[2] = FGOLibrary.ChildPlacement({
            childId: 1, placementURI: "ipfs://logo-placement",
            childType: FGOLibrary.ChildType.PRINT_DESIGN,
            childContract: address(printDesignChild), amount: 1
        });
        premiumPlacements[3] = FGOLibrary.ChildPlacement({
            childId: 1, placementURI: "ipfs://studs-placement",
            childType: FGOLibrary.ChildType.EMBELLISHMENTS,
            childContract: address(embellishmentsChild), amount: 2
        });
        premiumPlacements[4] = FGOLibrary.ChildPlacement({
            childId: 1, placementURI: "ipfs://wash-placement",
            childType: FGOLibrary.ChildType.FINISHING_TREATMENTS,
            childContract: address(finishingTreatmentsChild), amount: 1
        });

        vm.prank(designer2);
        uint256 premiumDesign = parentFGO.createDesign(
            premiumPlacements, "ipfs://premium-tee", 800 * 10**18, 1,
            FGOLibrary.ParentType.BOTH, createBasicWorkflow(), 0,
            new address[](0), 0
        );


        for (uint256 i = 0; i < 5; i++) {
            address buyer = makeAddr(string(abi.encodePacked("buyer", vm.toString(i))));
            testToken.mint(buyer, 1000000 * 10**18);
            vm.prank(buyer);
            testToken.approve(address(market), type(uint256).max);
            
            vm.prank(buyer);
            market.buyDesign(basicDesign, string(abi.encodePacked("ipfs://purchase", vm.toString(i))), 1, address(testToken), true);
        }

        vm.prank(buyer1);
        market.buyDesign(premiumDesign, "ipfs://premium-purchase1", 1, address(testToken), true);

        assertEq(patternChild.getPhysicalFulfillments(1), 6);
        assertEq(materialChild.getPhysicalFulfillments(1), 10);
        assertEq(materialChild.getPhysicalFulfillments(2), 3);
        assertEq(printDesignChild.getPhysicalFulfillments(1), 6);
        assertEq(embellishmentsChild.getPhysicalFulfillments(1), 2);
        assertEq(finishingTreatmentsChild.getPhysicalFulfillments(1), 1);

        assertTrue(patternChild.canFulfillPhysically(1));
        assertTrue(materialChild.canFulfillPhysically(2));
        assertEq(finishingTreatmentsChild.getPhysicalFulfillments(1), 1);
        assertEq(finishingTreatmentsChild.getMaxPhysicalFulfillments(1), 100);
    }
}