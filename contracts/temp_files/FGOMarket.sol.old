// SPDX-License-Identifier: UNLICENSE
pragma solidity ^0.8.28;

// NOTES ONLY - Implementation needed later  
// This contract handles market-specific logic

/*
MARKET RESPONSIBILITIES:

1. STOREFRONT INTERFACE:
   - Display available parent designs + children
   - Calculate total prices (parent + children)
   - Handle customer purchase requests

2. PURCHASE DELEGATION:
   - Receives: user selects parentContract + designId + isPhysical
   - Delegates to: FGOComposite.purchaseDesign()
   - Handles: payment collection, user notifications

3. FULFILLMENT COORDINATION (Physical):
   - Coordinates with fulfillment network
   - Confirms when physical items ready
   - Calls: FGOComposite.confirmFulfillment()

4. INVENTORY MANAGEMENT:
   - Tracks which designs market wants to sell
   - Requests authorization from parents/children
   - Monitors edition limits across designs

FUNCTIONS NEEDED:

// Storefront
function listDesign(address parentContract, uint256 designId) external
function removeDesign(address parentContract, uint256 designId) external
function getAvailableDesigns() external view
function calculateTotalPrice(address parentContract, uint256 designId) external view

// Purchase flow
function buyDesign(
    address parentContract,
    uint256 designId,
    bool isPhysical, 
    string customURI
) external payable // delegates to FGOComposite

// Fulfillment (physical)
function startFulfillment(uint256 compositeId) external // begin production
function completeFulfillment(uint256 compositeId) external // item ready

// Authorization requests
function requestParentAuthorization(address parentContract, uint256 designId) external
function requestChildAuthorization(address childContract, uint256 childId) external

INTEGRATION POINTS:
- FGOComposite: delegates all purchase logic
- Parent/Child: requests authorization
- Fulfillment network: coordinates physical production
- Payment system: handles MONA payments + currency swaps
*/

contract FGOMarket {
    // Implementation later - just interface/notes for now
}